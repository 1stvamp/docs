extends inc/layout

block vars
  - var title='Charm Store Policy'
  - var page='charm-store-policy'

block content
  article.

    <section id ="charm-policy">
    <h1>Charm Store Policy</h1>
        <p>This document serves to record the policies around charms included in the charm store, and the management of said charm collection. Charms in the store are peer reviewed by the community and are considered ready for consumption. These charms are marked as reviewed in the GUI and must follow these quality guidelines in ordered to be considered for the Store. These charms must:</p>
        <ul>
        <li>Must follow the spirit of the <a href="http://www.ubuntu.com/about/about-ubuntu/our-philosophy">Ubuntu Philosophy</a>.</li>
        <li>Must serve a useful purpose and have well defined behavior.</li>
        <li>Must also be valid for the charm format defined in Juju's documentation.</li>
        <li>Must verify that any software installed or utilized is verified as coming from the intended source. Any software installed from the Ubuntu archive satisfies this due to the apt sources including cryptographic signing information.</li>
        <li>Must be entirely self contained or depend only on reliable external services.</li>
        <li>Must include a full description of what the software does in the metadata.</li>
        <li>Must provide a means to protect users from known security vulnerabilities in a way consistent with best practices as defined by either Ubuntu policies or upstream documentation. Basically this means there must be instructions on how to apply updates if you use software not from Ubuntu.</li>
        <li>Must pass "charm proof" with no errors (lines prefixed with E:), remember this step!</li>
        <li>Must have a maintainer email address in metadata.yaml attached to a team or individual who are responsive to contact regarding the charm.</li>
        <li>Must include a license. Call the file 'copyright' and make sure all files' licenses are specified clearly.</li>
      <li>Must be under a <A href="http://opensource.org/osd">Free license</a>.
        <li>Must have hooks that are <A href="http://en.wikipedia.org/wiki/Idempotence">idempotent</a>.</li>
        <li>Must not run any network services using default passwords.</li>
        <li>Must call Juju API tools (relation-*, unit-*, config-*, etc) without a hard coded path. Should default to use software that is included in the Ubuntu archive, however we encourage that charm authors have a config options for allowing users to deploy from newer upstream releases, or even right from VCS if it's useful to users.</li>
        <li>Should not use anything infrastructure-provider specific (i.e. querying EC2 metadata service) symlinks must be self contained within a charm.</li>
        <li>Should make use of AppArmor to increase security</li>
        </ul>
        <p>The charm store referred to in this document is the collection of Juju charms hosted at <a href="https://launchpad.net/charms">https://launchpad.net/charms</a>.</p>
        </section>
        <section id ="charm-metadata">
        <h1>Charm Metadata</h1>
 
        <h2>metadata.yaml</h2>
 
        <p>This file is an important component of a charm, check out the <a href="https://bazaar.launchpad.net/~charmers/charms/precise/mysql/trunk/view/head:/metadata.yaml">MySQL metadata.yaml</a> as an example.</p>

        <ul>
        <li><code>name</code> -	Name must succinctly communicate what sort of service the charm deploys.</li>
        <li><code>description</code> - description should give a long form description of the service and the way that the charm configures it.</li>
        <li><code>maintainers</code> - all charms must have a maintainer email address. This can be an email list, as long as it is an unmoderated list (subscription required is ok).</li>
        <li><code>categories</code> - all charms should contain a category so it looks correctly in the web UI, any one of the following is acceptable: "databases", "file-servers", "applications", "cache-proxy", "app-servers" and "misc".</li>
        <li><code>requires</code> - despite the name, any interface that the charm can connect to, even one that is not required, can be enumerated here. All requires relationships must function with the same behavior as any existing de-facto implementations of said interface.</li>
        <li><code>provides</code> - All provides relationships listed must function with the same behavior as any existing de-facto implementations of said interface.</li>
        <li><code>revision</code> - All changes must increment revision. Groups of changes made all at once can increment it only once, but there are no exceptions as to what types of changes can cause the revision to go up.</li>
        </ul>
        <h2>config.yaml</h2>
        <p>Any de-facto config options must be kept at least until the next major charm series release. Removed config options should be deprecated first by noting that they are deprecated, and why, in their description. Instructions for converting values must be added to README as well.</p>
        <h2>README.md</h2>
        <p>Charms that want to display instructions to users can do so in either plain text by including a file called README. If the author would like to use markdown, the file should be called README.md, and if the author would like to use restructured text, the file should be called README.rst. Only one of these files can be included in the charm. We recommend Markdown due to its popularity and tooling.<p>
        <p>Remember that the README is used by the GUI and website as the default "front page" of the charm, so remember that it is user facing and should include easy to read instructions for deployment.</p>
        <h2>Interfaces</h2>
        <p>Charms should only implement a new interface when existing interfaces are insufficient to achieve the goal of the charm. Interfaces that have an official requires/provides in the charm store cannot be changed by adding required fields or removing existing fields. New optional fields can be added at any time.</p>
        <p>The charm store series denotes the OS release that the charms which are contained within it are intended to run on.</p>
        <h2>State</h2>
        <p>Each series can be in one of these states:</p>
        <ul>
        <li>Experimental - Charms can be added, but are in a state of flux.</li>
        <li>Active - The Charm store is actively accepting new charms and changes.</li>
        <li>Frozen - Only critical fixes are accepted.</li>
        <li>EOL - The OS version is not supported by the vendor, and thus, neither are the charms. </li>
        </ul>
        <h2>Experimental</h2>
        <p>Experimental series charms should adhere to the charm policy except that interfaces are never made 'de-facto' in an experimental series.</p>
        <ul>
        <li>Active - When a series is active, all changes are subject to the de-facto rules above.</li>
        <li>Frozen - The charmers team on launchpad has discretion when a series is frozen as to whether or not a change should be accepted.</li>
        <li>EOL - No changes will be accepted except those which help users who need to migrate to a supported series.</li>
        <li> Process - Charm store releases will be moved from Active to Frozen periodically to allow de-facto changes to settle and allow testing of infrastructure. New releases of target OS's will be reflected in the charm store as an experimental series. There can be multiple Active series at one time. Maintainers can choose whether or not to support their charm in all of the Active series, as long as the charm is maintained in at least one Active series.</li>
        </ul>
        </section>
